import groovy.json.JsonOutput

task generateTerraformTFVars {
    inputs.property("environment_name", environmentName)
    inputs.property("environment_type", environmentType)
    inputs.property("aws_profile", awsProfile)
    inputs.property("aws_region", awsRegion)
    inputs.property("azure_client_id", azureClientId)
    inputs.property("azure_client_secret", azureClientSecret)
    inputs.property("azure_subscription_id", azureSubscriptionId)
    inputs.property("azure_tenant_id", azureTenantId)
    inputs.property("azure_location", azureLocation)

    def propertyFile = file("${projectDir}/terraform.tfvars.json")
    outputs.file(propertyFile)

    doLast {
        def data = [
                environment_name     : environmentName,
                environment_type     : environmentType,
                prefix               : "${environmentName}-${environmentType}",

                aws_profile          : awsProfile,
                aws_region           : awsRegion,

                azure_client_id      : azureClientId,
                azure_client_secret  : azureClientSecret,
                azure_subscription_id: azureSubscriptionId,
                azure_tenant_id      : azureTenantId,
                azure_location       : azureLocation
        ]

        def json = JsonOutput.toJson(data)
        def jsonPretty = JsonOutput.prettyPrint(json)

        propertyFile.write(jsonPretty)
    }
}

task terraformInit(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.files fileTree(dir: '.', include: '*.tf')
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init"
    environment "AWS_PROFILE", awsProfile
}

task terraformInitUpgrade(type: Exec) {
    dependsOn ":verifyTerraform"
    inputs.files fileTree(dir: '.', include: '*.tf')
    outputs.upToDateWhen { file(".terraform").exists() }
    commandLine terraformExecutable
    args "init", "-upgrade"
    environment "AWS_PROFILE", awsProfile
}

task terraformPlan(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "plan"
}

task terraformApply(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn ":build"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "apply", "-auto-approve"
}

task terraformDestroy(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    dependsOn generateTerraformTFVars
    commandLine terraformExecutable
    args "destroy", "-auto-approve"
}

task terraformOutput(type: Exec) {
    dependsOn ":verifyTerraform"
    dependsOn terraformInit
    mustRunAfter terraformApply
    inputs.file("terraform.tfstate")
    inputs.property("environmentType", environmentType)
    outputs.file("terraform.output.json")
    commandLine terraformExecutable
    args "output", "-json"
    doFirst {
        standardOutput new FileOutputStream("${projectDir}/terraform.output.json")
    }
}

task clean(type: Delete) {
    delete "${projectDir}/.terraform"
    delete "${projectDir}/terraform.output.json"
    delete "${projectDir}/terraform.tfvars.json"
}

task plan {
    dependsOn(terraformPlan)
}

task apply {
    dependsOn(terraformApply)
}

task deploy {
    dependsOn(apply)
    dependsOn(":scripts:post-deploy:run")
}

task destroy {
    dependsOn(terraformDestroy)
}
